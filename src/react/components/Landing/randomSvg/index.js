import React, { useState, useEffect, useRef } from "react";
import { connect } from "react-redux";
import anime from 'animejs';

function RandomSVG() {
  let animation_1 = useRef(null);
  let animation_2 = useRef(null);
  let animation_3 = useRef(null);

  let [path1, setPath1] = useState(`m195.21 412.18c0.13515 0.10122-0.20773 0.84595-1.0348 2.1899s-2.1392 3.287-3.9828 5.7482c-3.6872 4.9223-9.4958 11.955-18.039 20.007-4.2718 4.0261-9.2302 8.2979-14.944 12.62-5.7141 4.3216-12.185 8.6933-19.453 12.876-7.2678 4.183-15.333 8.1773-24.191 11.699-8.8577 3.5221-18.508 6.5719-28.885 8.82-0.000008 0-0.000016 0.00001-0.000025 0.00001-9.6231 2.0812-19.848 3.4633-30.535 3.9508-10.687 0.48748-21.837 0.08-33.243-1.4026s-23.068-4.0407-34.706-7.8343c-11.639-3.7936-23.254-8.823-34.496-15.224-18.627-10.618-36.124-24.982-50.972-42.617s-27.042-38.539-34.83-61.697c-7.9044-23.543-11.164-49.248-9.1924-75.063 1.6009-20.966 6.5988-41.344 14.598-60.061 7.9814-18.698 18.991-35.729 32.077-50.174 13.087-14.445 28.248-26.3 44.612-34.995 17.886-9.478 37.041-14.961 55.752-16.81 10.146-1.0066 20.185-0.93101 29.868 0.13471 9.6828 1.0657 19.01 3.1214 27.795 6.0538 8.8206 2.952 17.049 6.7667 24.601 11.175 7.5523 4.4081 14.429 9.4097 20.594 14.771 12.33 10.724 21.778 22.855 28.569 34.945 3.7449 6.6748 6.6843 13.325 8.9793 19.755 2.295 6.4301 3.9459 12.641 5.1131 18.496 2.3345 11.711 2.7485 21.966 2.42 30.228-0.32856 8.262-1.386 14.556-2.308 18.746-0.92194 4.19-1.6954 6.2945-1.9702 6.2372-0.27476-0.0573-0.0418-2.2725 0.34213-6.4901 0.38394-4.2176 0.90432-10.456 0.72639-18.523s-1.0683-17.988-3.7673-29.198c-1.3495-5.6049-3.1539-11.524-5.5584-17.62-2.4045-6.0965-5.4095-12.371-9.1583-18.63-3.3936-5.6714-7.3989-11.326-12.054-16.811-4.6547-5.485-9.9592-10.801-15.912-15.761-5.9529-4.961-12.555-9.5675-19.76-13.601-7.205-4.0332-15.013-7.4933-23.332-10.126-8.2785-2.6282-17.065-4.4264-26.181-5.3-9.1162-0.87362-18.562-0.82257-28.097 0.22688-17.595 1.9439-35.571 7.2884-52.266 16.314-15.322 8.2595-29.527 19.542-41.805 33.266-12.278 13.725-22.629 29.889-30.153 47.578-7.5271 17.718-12.232 37.045-13.749 56.933-1.868 24.489 1.1722 48.878 8.5882 71.17 7.2845 21.935 18.772 41.842 32.781 58.706s30.534 30.679 48.144 40.946c10.622 6.1991 21.639 11.119 32.711 14.88 11.071 3.761 22.196 6.3633 33.103 7.9505 10.906 1.5871 21.595 2.1592 31.863 1.8793 10.268-0.27993 20.117-1.4116 29.412-3.2159 0.000008-0.00001 0.000016-0.00001 0.000024-0.00001 10.024-1.9421 19.4-4.661 28.05-7.843 8.6502-3.182 16.576-6.8272 23.762-10.665 14.371-7.675 25.755-16.081 34.515-23.536 8.76-7.4555 14.936-13.966 19.07-18.429 2.0672-2.2314 3.6229-3.9593 4.7054-5.0956 1.0824-1.1363 1.6925-1.6808 1.8276-1.5795z`);
  let [path2, setPath2] = useState(`m200.87 406.83c-0.14403 0.0881-0.70916-0.50584-1.652-1.7713-0.94285-1.2654-2.263-3.2031-3.8679-5.8261-3.2098-5.2461-7.5958-13.243-11.918-24.159-2.161-5.4578-4.2963-11.644-6.1985-18.552-1.9022-6.9072-3.571-14.536-4.7698-22.835-1.1988-8.2994-1.9273-17.27-1.9242-26.803 0.003-9.5322 0.7383-19.626 2.487-30.099 0.00001-0.00001 0.00001-0.00002 0.00001-0.00003 1.625-9.7105 4.1219-19.721 7.6211-29.831s8.0012-20.319 13.597-30.368c5.5955-10.049 12.285-19.938 20.113-29.349 7.8287-9.4107 16.797-18.343 26.901-26.42 16.754-13.38 36.57-24.324 58.446-31.599 21.876-7.274 45.807-10.874 70.204-9.5456 24.797 1.3622 49.885 7.8397 73.141 19.218 18.888 9.2406 35.973 21.42 50.405 35.773 14.421 14.33 26.174 30.857 34.755 48.358 8.5812 17.5 13.99 35.971 16.017 54.391 2.1918 20.123 0.20265 39.947-4.9987 58.016-2.8168 9.7991-6.5994 19.098-11.17 27.701-4.5709 8.6023-9.9299 16.508-15.903 23.586-6.0046 7.1036-12.592 13.338-19.48 18.725-6.8885 5.3868-14.078 9.9263-21.34 13.672-7.2616 3.7453-14.595 6.6968-21.82 8.9358-7.2246 2.239-14.341 3.7657-21.213 4.6847-7.5865 1.0111-14.852 1.2828-21.675 1.0372-6.823-0.24559-13.204-1.0084-19.076-2.0892-11.744-2.1617-21.425-5.5694-28.98-8.9299-7.5548-3.3606-13.012-6.6707-16.564-9.0767s-5.2213-3.903-5.0665-4.1371c0.15481-0.23411 2.1269 0.80152 5.9035 2.7179s9.3803 4.7068 16.941 7.5247c7.5609 2.8179 17.108 5.6594 28.521 7.2971 5.7066 0.81886 11.873 1.3312 18.427 1.3516 6.5535 0.0204 13.495-0.45114 20.696-1.6198 6.5243-1.0557 13.259-2.686 20.077-4.9824 6.8176-2.2964 13.718-5.2592 20.528-8.9556 6.8107-3.6964 13.532-8.1266 19.944-13.329 6.4117-5.2027 12.514-11.178 18.037-17.933 5.5033-6.7198 10.423-14.218 14.606-22.365 4.1829-8.1469 7.6285-16.942 10.179-26.189 4.7006-17.067 6.3823-35.744 4.1705-54.594-2.0078-17.291-7.2376-34.66-15.449-51.143-8.2111-16.483-19.402-32.078-33.054-45.61-13.679-13.546-29.895-25.064-47.813-33.829-22.062-10.792-45.846-16.986-69.3-18.339-23.074-1.3434-45.818 1.9678-66.667 8.7473-20.848 6.7795-39.796 17.024-55.847 29.589-9.6876 7.5764-18.333 15.994-25.921 24.889-7.5885 8.8956-14.12 18.269-19.628 27.816-5.5078 9.5464-9.9919 19.265-13.529 28.909-3.5372 9.644-6.1279 19.213-7.8887 28.516v0.00003c-1.9026 10.032-2.8434 19.748-3.0858 28.962-0.2424 9.2137 0.21339 17.926 1.1216 26.021 0.90821 8.0953 2.2686 15.575 3.8568 22.382 1.5881 6.8068 3.4037 12.942 5.2475 18.39 3.6875 10.896 7.4527 19.042 10.07 24.533 1.3088 2.7458 2.3389 4.8303 2.9944 6.2562 0.65546 1.4259 0.93574 2.194 0.79171 2.2822z`);
  let [path3, setPath3] = useState(`m201.31 402.58c-0.0189 0.16779-0.83477 0.2489-2.4125 0.21563-1.5777-0.0333-3.9176-0.18172-6.9733-0.52645-6.1114-0.68946-15.116-2.1408-26.385-5.435-5.6343-1.6471-11.828-3.7622-18.447-6.5038s-13.664-6.1107-20.95-10.263c-7.2856-4.1519-14.812-9.0874-22.332-14.945-7.5201-5.8576-15.034-12.638-22.224-20.451-0.000006-0.00001-0.000011-0.00002-0.000017-0.00002-6.6646-7.2469-13.031-15.366-18.859-24.338-5.8285-8.9712-11.119-18.795-15.612-29.383s-8.1878-21.941-10.805-33.899c-2.6175-11.958-4.1573-24.522-4.3247-37.457-0.26782-21.439 3.2678-43.799 10.965-65.53 7.6971-21.731 19.556-42.827 35.59-61.262 16.306-18.731 36.828-34.55 60.091-45.913 18.893-9.2286 38.999-15.23 59.19-17.802 20.166-2.5778 40.427-1.7002 59.508 2.2778s36.979 11.055 52.759 20.77c17.226 10.631 31.648 24.377 42.711 39.58 6.0024 8.2418 11.017 16.939 14.998 25.83 3.9806 8.8908 6.9271 17.976 8.8435 27.037 1.9173 9.1017 2.791 18.129 2.8106 26.874 0.0197 8.7446-0.81455 17.207-2.3194 25.237-1.5049 8.0308-3.6803 15.631-6.3512 22.707-2.6709 7.0763-5.8371 13.63-9.3332 19.617-3.862 6.6077-8.1107 12.508-12.495 17.742-4.3848 5.2333-8.906 9.8-13.366 13.77-4.4597 3.9698-8.8583 7.3434-13.044 10.209-4.1853 2.8661-8.1578 5.2254-11.804 7.1741-7.2923 3.8974-13.256 6.1704-17.337 7.4955-4.0805 1.3251-6.287 1.7229-6.3767 1.4569-0.0896-0.26597 1.9389-1.186 5.7709-2.9891s9.476-4.5111 16.344-8.7467c6.8678-4.2356 14.974-10.024 23.277-18.024 4.1514-4.0002 8.3434-8.5516 12.385-13.711 4.0416-5.159 7.9331-10.926 11.434-17.326 3.1744-5.7969 6.0248-12.113 8.4003-18.903 2.3755-6.7904 4.276-14.055 5.5425-21.7 1.2665-7.6449 1.899-15.67 1.7319-23.925-0.16719-8.2553-1.1342-16.741-3.0725-25.248-1.9223-8.4703-4.8176-16.959-8.6772-25.264-3.8596-8.3049-8.6835-16.426-14.413-24.119-10.58-14.21-24.29-27.009-40.52-36.842-14.88-9.037-31.8-15.579-49.85-19.224s-37.23-4.393-56.29-1.931c-19.09 2.473-38.14 8.195-56.07 16.951-22.06 10.781-41.56 25.744-57.034 43.421-15.233 17.385-26.59 37.365-34.047 57.985-7.4562 20.616-11.01 41.861-10.954 62.244 0.02817 12.298 1.3602 24.291 3.7187 35.743s5.7434 22.364 9.8935 32.575c4.1501 10.21 9.0653 19.718 14.503 28.433 5.4376 8.715 11.398 16.637 17.657 23.741 0.000006 0.00001 0.000011 0.00002 0.000017 0.00002 6.7477 7.6634 13.837 14.374 20.959 20.225 7.1218 5.8507 14.277 10.842 21.223 15.098 6.946 4.2558 13.684 7.7766 20.031 10.704 6.3469 2.9278 12.303 5.2636 17.735 7.155 10.863 3.7829 19.604 5.8152 25.545 7.1227 2.9707 0.65379 5.2483 1.1213 6.7761 1.4799 1.5278 0.35862 2.3061 0.60927 2.2872 0.77706z`);
    
  useEffect(() => {

    animation_1.current = anime({
      targets: ".svgCool1 ",
      duration: 70000,
      easing: "easeInOutSine",
      direction: 'alternate',
      delay: anime.stagger(1000),
      loop: true,
      strokeDashoffset: [anime.setDashoffset, 310],
      d: [
        {
          value: path3,
        }
      ]
    });
    
    animation_2.current = anime({
      targets: ".svgCool2 ",
      duration: 100000,
      easing: "easeInOutSine",
      direction: 'alternate',
      delay: anime.stagger(2000),
      loop: true,
      strokeDashoffset: [anime.setDashoffset, 210],
      d: [
        {
          value: path1,
        }
      ]
    });

    animation_3.current = anime({
      targets: ".svgCool3 ",
      duration: 50000,
      easing: "easeInOutSine",
      direction: 'alternate',
      delay: anime.stagger(3000),
      loop: true,
      strokeDashoffset: [anime.setDashoffset, 100],
      d: [
        {
          value: path2,
        }
      ]
    });

  }, []);

  return (
    <>
      <svg width="100%" height="100%" viewBox="0 0 703.4 756.1">
        <g transform="translate(-262.31 -240.47)">
          <g
            fill-rule="evenodd"
            transform="translate(406.17 212.83)">
            <g style={{
              fill: 'transparent',
              strokeDasharray: "550",
              strokeWidth: "2px",
              stroke: "rgba(25,246,232,0.10)",
              animation: 'dash 2s linear alternate infinite',
            }}>
              <path style={{ stroke: "rgba(25,246,232,0.10)" }} className="svgCool3" d={path3} />
              <path style={{ stroke: "rgba(25,246,232,0.10)" }} className="svgCool2" d={path2} />
              <path style={{ stroke: "rgba(25,246,232,0.10)" }} className="svgCool1" d={path1} />

              <path style={{ stroke: "rgba(215,46,32,0.10)" }} className="svgCool1" d={path1} />
              <path style={{ stroke: "rgba(215,46,32,0.10)" }} className="svgCool2" d={path2} />
              <path style={{ stroke: "rgba(215,46,32,0.10)" }} className="svgCool3" d={path3} />
            </g>
          </g>
        </g>
      </svg>
    </>
  );
}

// State SVG
const mapStateToProps = state => { return { data: state }; };
export default connect(mapStateToProps)(RandomSVG);